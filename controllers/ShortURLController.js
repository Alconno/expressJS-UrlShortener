const shortURLService = require('../services/ShortURLService');
const userLogService = require('../services/UserLogService');
require('dotenv').config();

class ShortURLController {
  /**
   * @swagger
   * /api/url/shorten:
   *   post:
   *     summary: Shorten a long URL
   *     tags: [URL Shortener]
   *     security:
   *       - jwtAuth: []
   *     requestBody:
   *       required: true
   *       content:
   *         application/json:
   *           schema:
   *             type: object
   *             properties:
   *               longURL:
   *                 type: string
   *                 example: "https://www.youtube.com/"
   *               customShortCode:
   *                 type: string
   *                 example: "yt"
   *             required:
   *               - longURL
   *     responses:
   *       201:
   *         description: URL successfully shortened
   *         content:
   *           application/json:
   *             example:
   *               shortURL: "http://example.com/s/abc123"
   *       400:
   *         description: Bad Request Data
   *         content:
   *           application/json:
   *             example:
   *               error: Bad Request Data
   *       401:
   *         description: User not logged in
   *         content:
   *           application/json:
   *             example:
   *               error: User not logged in
   */
  async shortenURL(req, res) {
    try {
      const { longURL, customShortCode } = req.body;
      const userId = req.userId;

      const shortURL = await shortURLService.shortenURL(longURL, customShortCode, userId);

      // Add User Log
      await userLogService.create("CREATE", `User shortened their URL ${longURL} to http://localhost:3000/api/url/${customShortCode}`, userId);


      res.status(201).json(shortURL);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }



  /**
   * @swagger
   * /api/url/{shortCode}/show-long-url:
   *   get:
   *     summary: Retrieve the long URL for a ShortURL
   *     description: Retrieve the long URL for a ShortURL using its short code
   *     tags: [URL Shortener]
   *     parameters:
   *       - in: path
   *         name: shortCode
   *         description: Short code of the ShortURL
   *         required: true
   *         schema:
   *           type: string
   *     responses:
   *       200:
   *         description: Long URL retrieved successfully
   *         content:
   *           application/json:
   *             example:
   *               longURL: "https://www.example.com/"
   *       404:
   *         description: ShortURL not found
   *         content:
   *           application/json:
   *             example:
   *               message: "ShortURL not found"
   *       500:
   *         description: Internal Server Error
   *         content:
   *           application/json:
   *             example:
   *               error: "Internal Server Error"
   */
  async showLongUrl(req, res){
    try{
      const shortURL = await shortURLService.showLongUrl(req.params.shortCode);

      if(!shortURL)
        return res.status(404).json({ message: "ShortURL not found" });

      res.status(200).json(shortURL.longURL);
    }catch(error){
      res.status(500).json({ error: error.message });
    }
  }

  /**
   * @swagger
   * /api/url/{shortCode}:
   *   get:
   *     summary: Redirect to the long URL associated with the short code
   *     tags: [URL Shortener]
   *     parameters:
   *       - in: path
   *         name: shortCode
   *         required: true
   *         schema:
   *           type: string
   *         description: Short code generated for the URL
   *     responses:
   *       302:
   *         description: Redirect to the long URL
   *       404:
   *         description: Short code not found
   *         content:
   *           application/json:
   *             example:
   *               error: Short code not found
   */
  async redirectToLongURL(req, res) {
    try {
      const userId = req.userId;
      const shortCode = req.params.shortCode;

      const longURL = await shortURLService.redirectToLongURL(shortCode);

      // Add User Log
      await userLogService.create("SHOW", `User requested redirect with URL http://localhost:3000/api/url/${shortCode} to ${longURL}`, userId);

      res.redirect(longURL);
    } catch (error) {
      res.status(404).json({ error: 'Short code not found' });
    }
  }

  /**
   * @swagger
   * /api/url/list/logged-user:
   *   get:
   *     summary: Get a list of short URLs generated by the logged-in user
   *     tags: [URL Shortener]
   *     security:
   *       - jwtAuth: []
   *     responses:
   *       204:
   *         description: List of short URLs generated by the user
   *         content:
   *           application/json:
   *             example:
   *               - shortURL: "http://example.com/s/abc123"
   *                 longURL: "https://www.example.com/"
   *               - shortURL: "http://example.com/s/def456"
   *                 longURL: "https://www.anotherexample.com/"
   *       200:
   *         description: User has no generated short URLs
   *         content:
   *           application/json:
   *             example:
   *               message: "User has no generated shortURLs"
   *       500:
   *         description: Internal Server Error
   *         content:
   *           application/json:
   *             example:
   *               error: "Internal Server Error"
   */
  async listLoggedUserUrls(req, res){
    try{
      const userId = req.userId;

      const userUrls = await shortURLService.listLoggedUserUrls(userId);

      if(userUrls.length === 0)
        return res.status(204).json({ message: "User has no generated shortURLs" });

      // Add User Log
      await userLogService.create("SHOW", `User requested to list their own ShortURLs`, userId);

      res.status(200).json(userUrls);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  }


  /**
   * @swagger
   * /api/url/update/{shortURLId}:
   *   patch:
   *     summary: Update custom short code for a ShortURL
   *     description: Update the custom short code for a ShortURL created by the logged-in user
   *     tags: [URL Shortener]
   *     security:
   *       - jwtAuth: []
   *     parameters:
   *       - in: path
   *         name: shortURLId
   *         description: ID of the ShortURL to be updated
   *         required: true
   *         schema:
   *           type: string
   *     requestBody:
   *       description: New custom short code
   *       required: true
   *       content:
   *         application/json:
   *           example:
   *             customShortCode: "newShortCode123"
   *     responses:
   *       200:
   *         description: ShortURL updated successfully
   *         content:
   *           application/json:
   *             example:
   *               message: "ShortURL updated successfully"
   *       401:
   *         description: Unauthorized
   *         content:
   *           application/json:
   *             example:
   *               error: "Unauthorized"
   *       404:
   *         description: ShortURL not found
   *         content:
   *           application/json:
   *             example:
   *               message: "ShortURL not found"
   *       500:
   *         description: Internal Server Error
   *         content:
   *           application/json:
   *             example:
   *               error: "Internal Server Error"
   */
  async update(req, res){
    try{
      const userId = req.userId;
      const shortCode = req.body.customShortCode;
      const updatedShortUrl = await shortURLService.update(userId, req.params.shortURLId, shortCode);

      if(!updatedShortUrl)
        return res.status(404).json({ message: "ShortURL not found" });

      // Add User Log
      await userLogService.create("UPDATE", `User updated their shortURL from ${shortCode} to ${updatedShortUrl.shortCode}`, userId);


      res.status(200).json(updatedShortUrl);
    }catch(error){
      res.status(500).json({ error: error.message });
    }
  }



  /**
   * @swagger
   * /api/url/delete/{shortURLId}:
   *   delete:
   *     summary: Delete a ShortURL
   *     description: Delete a ShortURL created by the logged-in user
   *     tags: [URL Shortener]
   *     security:
   *       - jwtAuth: []
   *     parameters:
   *       - in: path
   *         name: shortURLId
   *         description: ID of the ShortURL to be deleted
   *         required: true
   *         schema:
   *           type: string
   *     responses:
   *       200:
   *         description: ShortURL deleted successfully
   *         content:
   *           application/json:
   *             example:
   *               message: "ShortURL deleted successfully"
   *       401:
   *         description: Unauthorized
   *         content:
   *           application/json:
   *             example:
   *               error: "Unauthorized"
   *       404:
   *         description: ShortURL not found
   *         content:
   *           application/json:
   *             example:
   *               message: "ShortURL not found"
   *       500:
   *         description: Internal Server Error
   *         content:
   *           application/json:
   *             example:
   *               error: "Internal Server Error"
   */
  async delete(req, res){
    try{
      const shortURLId = req.params.shortURLId;
      const userId = req.userId;
      const shortURL = await shortURLService.showById(shortURLId)
      const success = await shortURLService.delete(userId, shortURL);

      if(!success)
        return res.status(404).json({ message: "ShortURL not found" });

      // Add User Log
      await userLogService.create("DELETE", `User deleted their ShortURL "${shortURL.shortCode}" - "${shortURL.longURL}`, userId);


      res.status(200).json({message: "ShortURL deleted successfully"});
    }catch(error){
      res.status(500).json({ error: error.message });
    }
  }

}





module.exports = new ShortURLController();
